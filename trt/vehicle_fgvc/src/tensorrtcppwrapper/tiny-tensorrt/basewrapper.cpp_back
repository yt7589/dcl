#include "basewrapper.hpp"

#include <cassert>
#include <iostream>
//#include <fstream>

#include <algorithm>
// ******************************************  BaseWrapper  ******************************************

BaseWrapper::BaseWrapper():_bInitialized(false)
{
}

BaseWrapper::~BaseWrapper()
{
}

void BaseWrapper::destroy()
{  //std::cout << " hh ";
	destroy_ipl();
	_bInitialized = false;
}

bool BaseWrapper::initial(const std::vector<std::vector<char>>& model_data,const WrapperConfig& config)
{
	if (_bInitialized)
	{
		std::cout << "warning: BaseWrapper has areadly been initialized, starting reinitializing..."  << std::endl;
		destroy();
		//return _bInitialized;
	}
	
	// initial base class
	_config = config;
	if (_config.inputLayers.size() > 1)
	{
		std::cout << "ERROR: inputLayers.size() must be smaller than 1..."  << std::endl;
		return false;
	}
	
	
	std::vector<int> devices = config.iConfig.devices;
	if (devices.empty())
	{
		devices.push_back(-1);
	}
	auto maxPosition = std::max_element(devices.begin(), devices.end());
	if (*maxPosition > 16)
	{
		std::cout<< "such a big deice : " << *maxPosition <<std::endl;
		return false;
	}
	
	_config.iConfig.devices = devices;
	_bInitialized = initial_ipl(model_data, config);
	
	return _bInitialized;
}

bool BaseWrapper::forward(const std::vector<float> &input,\
						 std::vector<std::vector<float> >& out_results)
{
	if (!_bInitialized)
	{
		std::cout << "Error: BaseWrapper has not been initialized..."  << std::endl;
		return false;
	}
	forward_ipl(input, out_results);
}


